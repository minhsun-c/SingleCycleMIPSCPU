$date
	Sun Jan 21 09:40:07 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! areset $end
$var reg 1 " clk $end
$scope module CPU $end
$var wire 32 # alu_in1 [31:0] $end
$var wire 1 ! areset $end
$var wire 1 " clk $end
$var wire 32 $ dm_data [31:0] $end
$var wire 4 % im_read_addr [3:0] $end
$var wire 32 & rf_write_data [31:0] $end
$var wire 5 ' rf_write_addr [4:0] $end
$var wire 32 ( rf_read_data2 [31:0] $end
$var wire 32 ) rf_read_data1 [31:0] $end
$var wire 5 * rf_read_addr2 [4:0] $end
$var wire 5 + rf_read_addr1 [4:0] $end
$var wire 32 , inst [31:0] $end
$var wire 32 - imm_sign_ex [31:0] $end
$var wire 32 . dm_output [31:0] $end
$var wire 4 / dm_addr [3:0] $end
$var wire 1 0 alu_zero_flag $end
$var wire 32 1 alu_result [31:0] $end
$var wire 32 2 alu_in2 [31:0] $end
$var reg 2 3 ALUOp_ctrl [1:0] $end
$var reg 1 4 ALUSrc_ctrl $end
$var reg 1 5 MemRead_ctrl $end
$var reg 1 6 MemWrite_ctrl $end
$var reg 1 7 MemtoReg_ctrl $end
$var reg 4 8 Program_Counter [3:0] $end
$var reg 1 9 RegDst_ctrl $end
$var reg 1 : RegWrite_ctrl $end
$var reg 32 ; wb_data [31:0] $end
$scope module Data_Memory $end
$var wire 4 < byte_addr [3:0] $end
$var wire 32 = data_i [31:0] $end
$var wire 1 5 e_read $end
$var wire 1 6 e_write $end
$var wire 4 > start_addr [3:0] $end
$var reg 32 ? out [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 4 @ byte_addr [3:0] $end
$var wire 4 A start_addr [3:0] $end
$var reg 32 B out [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 : e_write $end
$var wire 5 C read_addr1 [4:0] $end
$var wire 5 D read_addr2 [4:0] $end
$var wire 5 E write_addr [4:0] $end
$var wire 32 F write_data [31:0] $end
$var reg 32 G read_d1 [31:0] $end
$var reg 32 H read_d2 [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 I i [31:0] $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 32 J A [31:0] $end
$var wire 32 K B [31:0] $end
$var wire 1 L Cin $end
$var wire 2 M opcode [1:0] $end
$var wire 1 0 zero_f $end
$var wire 1 N zero_f1 $end
$var wire 1 O zero_f0 $end
$var wire 32 P result [31:0] $end
$var wire 1 Q Cout $end
$var wire 1 R C $end
$scope module A0 $end
$var wire 16 S A [15:0] $end
$var wire 16 T B [15:0] $end
$var wire 1 L Cin $end
$var wire 2 U opcode [1:0] $end
$var wire 1 O zero_f $end
$var wire 1 V zero_f9 $end
$var wire 1 W zero_f8 $end
$var wire 1 X zero_f7 $end
$var wire 1 Y zero_f6 $end
$var wire 1 Z zero_f5 $end
$var wire 1 [ zero_f4 $end
$var wire 1 \ zero_f3 $end
$var wire 1 ] zero_f2 $end
$var wire 1 ^ zero_f15 $end
$var wire 1 _ zero_f14 $end
$var wire 1 ` zero_f13 $end
$var wire 1 a zero_f12 $end
$var wire 1 b zero_f11 $end
$var wire 1 c zero_f10 $end
$var wire 1 d zero_f1 $end
$var wire 1 e zero_f0 $end
$var wire 16 f result [15:0] $end
$var wire 1 R Cout $end
$var wire 1 g C9 $end
$var wire 1 h C8 $end
$var wire 1 i C7 $end
$var wire 1 j C6 $end
$var wire 1 k C5 $end
$var wire 1 l C4 $end
$var wire 1 m C3 $end
$var wire 1 n C2 $end
$var wire 1 o C14 $end
$var wire 1 p C13 $end
$var wire 1 q C12 $end
$var wire 1 r C11 $end
$var wire 1 s C10 $end
$var wire 1 t C1 $end
$var wire 1 u C0 $end
$scope module A0 $end
$var wire 1 v A $end
$var wire 1 w B $end
$var wire 1 L Cin $end
$var wire 2 x opcode [1:0] $end
$var wire 1 e zero_f $end
$var wire 1 y addition_rst $end
$var wire 1 z addition_cout $end
$var reg 1 u Cout $end
$var reg 1 { result $end
$scope module ADD $end
$var wire 1 v A $end
$var wire 1 w B $end
$var wire 1 L Cin $end
$var wire 1 z Cout $end
$var wire 1 y Sum $end
$upscope $end
$upscope $end
$scope module A1 $end
$var wire 1 | A $end
$var wire 1 } B $end
$var wire 1 u Cin $end
$var wire 2 ~ opcode [1:0] $end
$var wire 1 d zero_f $end
$var wire 1 !" addition_rst $end
$var wire 1 "" addition_cout $end
$var reg 1 t Cout $end
$var reg 1 #" result $end
$scope module ADD $end
$var wire 1 | A $end
$var wire 1 } B $end
$var wire 1 u Cin $end
$var wire 1 "" Cout $end
$var wire 1 !" Sum $end
$upscope $end
$upscope $end
$scope module A10 $end
$var wire 1 $" A $end
$var wire 1 %" B $end
$var wire 2 &" opcode [1:0] $end
$var wire 1 c zero_f $end
$var wire 1 '" addition_rst $end
$var wire 1 (" addition_cout $end
$var wire 1 g Cin $end
$var reg 1 s Cout $end
$var reg 1 )" result $end
$scope module ADD $end
$var wire 1 $" A $end
$var wire 1 %" B $end
$var wire 1 (" Cout $end
$var wire 1 '" Sum $end
$var wire 1 g Cin $end
$upscope $end
$upscope $end
$scope module A11 $end
$var wire 1 *" A $end
$var wire 1 +" B $end
$var wire 1 s Cin $end
$var wire 2 ," opcode [1:0] $end
$var wire 1 b zero_f $end
$var wire 1 -" addition_rst $end
$var wire 1 ." addition_cout $end
$var reg 1 r Cout $end
$var reg 1 /" result $end
$scope module ADD $end
$var wire 1 *" A $end
$var wire 1 +" B $end
$var wire 1 s Cin $end
$var wire 1 ." Cout $end
$var wire 1 -" Sum $end
$upscope $end
$upscope $end
$scope module A12 $end
$var wire 1 0" A $end
$var wire 1 1" B $end
$var wire 1 r Cin $end
$var wire 2 2" opcode [1:0] $end
$var wire 1 a zero_f $end
$var wire 1 3" addition_rst $end
$var wire 1 4" addition_cout $end
$var reg 1 q Cout $end
$var reg 1 5" result $end
$scope module ADD $end
$var wire 1 0" A $end
$var wire 1 1" B $end
$var wire 1 r Cin $end
$var wire 1 4" Cout $end
$var wire 1 3" Sum $end
$upscope $end
$upscope $end
$scope module A13 $end
$var wire 1 6" A $end
$var wire 1 7" B $end
$var wire 1 q Cin $end
$var wire 2 8" opcode [1:0] $end
$var wire 1 ` zero_f $end
$var wire 1 9" addition_rst $end
$var wire 1 :" addition_cout $end
$var reg 1 p Cout $end
$var reg 1 ;" result $end
$scope module ADD $end
$var wire 1 6" A $end
$var wire 1 7" B $end
$var wire 1 q Cin $end
$var wire 1 :" Cout $end
$var wire 1 9" Sum $end
$upscope $end
$upscope $end
$scope module A14 $end
$var wire 1 <" A $end
$var wire 1 =" B $end
$var wire 1 p Cin $end
$var wire 2 >" opcode [1:0] $end
$var wire 1 _ zero_f $end
$var wire 1 ?" addition_rst $end
$var wire 1 @" addition_cout $end
$var reg 1 o Cout $end
$var reg 1 A" result $end
$scope module ADD $end
$var wire 1 <" A $end
$var wire 1 =" B $end
$var wire 1 p Cin $end
$var wire 1 @" Cout $end
$var wire 1 ?" Sum $end
$upscope $end
$upscope $end
$scope module A15 $end
$var wire 1 B" A $end
$var wire 1 C" B $end
$var wire 1 o Cin $end
$var wire 2 D" opcode [1:0] $end
$var wire 1 ^ zero_f $end
$var wire 1 E" addition_rst $end
$var wire 1 F" addition_cout $end
$var reg 1 R Cout $end
$var reg 1 G" result $end
$scope module ADD $end
$var wire 1 B" A $end
$var wire 1 C" B $end
$var wire 1 o Cin $end
$var wire 1 F" Cout $end
$var wire 1 E" Sum $end
$upscope $end
$upscope $end
$scope module A2 $end
$var wire 1 H" A $end
$var wire 1 I" B $end
$var wire 1 t Cin $end
$var wire 2 J" opcode [1:0] $end
$var wire 1 ] zero_f $end
$var wire 1 K" addition_rst $end
$var wire 1 L" addition_cout $end
$var reg 1 n Cout $end
$var reg 1 M" result $end
$scope module ADD $end
$var wire 1 H" A $end
$var wire 1 I" B $end
$var wire 1 t Cin $end
$var wire 1 L" Cout $end
$var wire 1 K" Sum $end
$upscope $end
$upscope $end
$scope module A3 $end
$var wire 1 N" A $end
$var wire 1 O" B $end
$var wire 1 n Cin $end
$var wire 2 P" opcode [1:0] $end
$var wire 1 \ zero_f $end
$var wire 1 Q" addition_rst $end
$var wire 1 R" addition_cout $end
$var reg 1 m Cout $end
$var reg 1 S" result $end
$scope module ADD $end
$var wire 1 N" A $end
$var wire 1 O" B $end
$var wire 1 n Cin $end
$var wire 1 R" Cout $end
$var wire 1 Q" Sum $end
$upscope $end
$upscope $end
$scope module A4 $end
$var wire 1 T" A $end
$var wire 1 U" B $end
$var wire 1 m Cin $end
$var wire 2 V" opcode [1:0] $end
$var wire 1 [ zero_f $end
$var wire 1 W" addition_rst $end
$var wire 1 X" addition_cout $end
$var reg 1 l Cout $end
$var reg 1 Y" result $end
$scope module ADD $end
$var wire 1 T" A $end
$var wire 1 U" B $end
$var wire 1 m Cin $end
$var wire 1 X" Cout $end
$var wire 1 W" Sum $end
$upscope $end
$upscope $end
$scope module A5 $end
$var wire 1 Z" A $end
$var wire 1 [" B $end
$var wire 1 l Cin $end
$var wire 2 \" opcode [1:0] $end
$var wire 1 Z zero_f $end
$var wire 1 ]" addition_rst $end
$var wire 1 ^" addition_cout $end
$var reg 1 k Cout $end
$var reg 1 _" result $end
$scope module ADD $end
$var wire 1 Z" A $end
$var wire 1 [" B $end
$var wire 1 l Cin $end
$var wire 1 ^" Cout $end
$var wire 1 ]" Sum $end
$upscope $end
$upscope $end
$scope module A6 $end
$var wire 1 `" A $end
$var wire 1 a" B $end
$var wire 1 k Cin $end
$var wire 2 b" opcode [1:0] $end
$var wire 1 Y zero_f $end
$var wire 1 c" addition_rst $end
$var wire 1 d" addition_cout $end
$var reg 1 j Cout $end
$var reg 1 e" result $end
$scope module ADD $end
$var wire 1 `" A $end
$var wire 1 a" B $end
$var wire 1 k Cin $end
$var wire 1 d" Cout $end
$var wire 1 c" Sum $end
$upscope $end
$upscope $end
$scope module A7 $end
$var wire 1 f" A $end
$var wire 1 g" B $end
$var wire 1 j Cin $end
$var wire 2 h" opcode [1:0] $end
$var wire 1 X zero_f $end
$var wire 1 i" addition_rst $end
$var wire 1 j" addition_cout $end
$var reg 1 i Cout $end
$var reg 1 k" result $end
$scope module ADD $end
$var wire 1 f" A $end
$var wire 1 g" B $end
$var wire 1 j Cin $end
$var wire 1 j" Cout $end
$var wire 1 i" Sum $end
$upscope $end
$upscope $end
$scope module A8 $end
$var wire 1 l" A $end
$var wire 1 m" B $end
$var wire 1 i Cin $end
$var wire 2 n" opcode [1:0] $end
$var wire 1 W zero_f $end
$var wire 1 o" addition_rst $end
$var wire 1 p" addition_cout $end
$var reg 1 h Cout $end
$var reg 1 q" result $end
$scope module ADD $end
$var wire 1 l" A $end
$var wire 1 m" B $end
$var wire 1 i Cin $end
$var wire 1 p" Cout $end
$var wire 1 o" Sum $end
$upscope $end
$upscope $end
$scope module A9 $end
$var wire 1 r" A $end
$var wire 1 s" B $end
$var wire 1 h Cin $end
$var wire 2 t" opcode [1:0] $end
$var wire 1 V zero_f $end
$var wire 1 u" addition_rst $end
$var wire 1 v" addition_cout $end
$var reg 1 g Cout $end
$var reg 1 w" result $end
$scope module ADD $end
$var wire 1 r" A $end
$var wire 1 s" B $end
$var wire 1 h Cin $end
$var wire 1 v" Cout $end
$var wire 1 u" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module A1 $end
$var wire 16 x" A [15:0] $end
$var wire 16 y" B [15:0] $end
$var wire 1 R Cin $end
$var wire 2 z" opcode [1:0] $end
$var wire 1 N zero_f $end
$var wire 1 {" zero_f9 $end
$var wire 1 |" zero_f8 $end
$var wire 1 }" zero_f7 $end
$var wire 1 ~" zero_f6 $end
$var wire 1 !# zero_f5 $end
$var wire 1 "# zero_f4 $end
$var wire 1 ## zero_f3 $end
$var wire 1 $# zero_f2 $end
$var wire 1 %# zero_f15 $end
$var wire 1 &# zero_f14 $end
$var wire 1 '# zero_f13 $end
$var wire 1 (# zero_f12 $end
$var wire 1 )# zero_f11 $end
$var wire 1 *# zero_f10 $end
$var wire 1 +# zero_f1 $end
$var wire 1 ,# zero_f0 $end
$var wire 16 -# result [15:0] $end
$var wire 1 Q Cout $end
$var wire 1 .# C9 $end
$var wire 1 /# C8 $end
$var wire 1 0# C7 $end
$var wire 1 1# C6 $end
$var wire 1 2# C5 $end
$var wire 1 3# C4 $end
$var wire 1 4# C3 $end
$var wire 1 5# C2 $end
$var wire 1 6# C14 $end
$var wire 1 7# C13 $end
$var wire 1 8# C12 $end
$var wire 1 9# C11 $end
$var wire 1 :# C10 $end
$var wire 1 ;# C1 $end
$var wire 1 <# C0 $end
$scope module A0 $end
$var wire 1 =# A $end
$var wire 1 ># B $end
$var wire 1 R Cin $end
$var wire 2 ?# opcode [1:0] $end
$var wire 1 ,# zero_f $end
$var wire 1 @# addition_rst $end
$var wire 1 A# addition_cout $end
$var reg 1 <# Cout $end
$var reg 1 B# result $end
$scope module ADD $end
$var wire 1 =# A $end
$var wire 1 ># B $end
$var wire 1 R Cin $end
$var wire 1 A# Cout $end
$var wire 1 @# Sum $end
$upscope $end
$upscope $end
$scope module A1 $end
$var wire 1 C# A $end
$var wire 1 D# B $end
$var wire 1 <# Cin $end
$var wire 2 E# opcode [1:0] $end
$var wire 1 +# zero_f $end
$var wire 1 F# addition_rst $end
$var wire 1 G# addition_cout $end
$var reg 1 ;# Cout $end
$var reg 1 H# result $end
$scope module ADD $end
$var wire 1 C# A $end
$var wire 1 D# B $end
$var wire 1 <# Cin $end
$var wire 1 G# Cout $end
$var wire 1 F# Sum $end
$upscope $end
$upscope $end
$scope module A10 $end
$var wire 1 I# A $end
$var wire 1 J# B $end
$var wire 2 K# opcode [1:0] $end
$var wire 1 *# zero_f $end
$var wire 1 L# addition_rst $end
$var wire 1 M# addition_cout $end
$var wire 1 .# Cin $end
$var reg 1 :# Cout $end
$var reg 1 N# result $end
$scope module ADD $end
$var wire 1 I# A $end
$var wire 1 J# B $end
$var wire 1 M# Cout $end
$var wire 1 L# Sum $end
$var wire 1 .# Cin $end
$upscope $end
$upscope $end
$scope module A11 $end
$var wire 1 O# A $end
$var wire 1 P# B $end
$var wire 1 :# Cin $end
$var wire 2 Q# opcode [1:0] $end
$var wire 1 )# zero_f $end
$var wire 1 R# addition_rst $end
$var wire 1 S# addition_cout $end
$var reg 1 9# Cout $end
$var reg 1 T# result $end
$scope module ADD $end
$var wire 1 O# A $end
$var wire 1 P# B $end
$var wire 1 :# Cin $end
$var wire 1 S# Cout $end
$var wire 1 R# Sum $end
$upscope $end
$upscope $end
$scope module A12 $end
$var wire 1 U# A $end
$var wire 1 V# B $end
$var wire 1 9# Cin $end
$var wire 2 W# opcode [1:0] $end
$var wire 1 (# zero_f $end
$var wire 1 X# addition_rst $end
$var wire 1 Y# addition_cout $end
$var reg 1 8# Cout $end
$var reg 1 Z# result $end
$scope module ADD $end
$var wire 1 U# A $end
$var wire 1 V# B $end
$var wire 1 9# Cin $end
$var wire 1 Y# Cout $end
$var wire 1 X# Sum $end
$upscope $end
$upscope $end
$scope module A13 $end
$var wire 1 [# A $end
$var wire 1 \# B $end
$var wire 1 8# Cin $end
$var wire 2 ]# opcode [1:0] $end
$var wire 1 '# zero_f $end
$var wire 1 ^# addition_rst $end
$var wire 1 _# addition_cout $end
$var reg 1 7# Cout $end
$var reg 1 `# result $end
$scope module ADD $end
$var wire 1 [# A $end
$var wire 1 \# B $end
$var wire 1 8# Cin $end
$var wire 1 _# Cout $end
$var wire 1 ^# Sum $end
$upscope $end
$upscope $end
$scope module A14 $end
$var wire 1 a# A $end
$var wire 1 b# B $end
$var wire 1 7# Cin $end
$var wire 2 c# opcode [1:0] $end
$var wire 1 &# zero_f $end
$var wire 1 d# addition_rst $end
$var wire 1 e# addition_cout $end
$var reg 1 6# Cout $end
$var reg 1 f# result $end
$scope module ADD $end
$var wire 1 a# A $end
$var wire 1 b# B $end
$var wire 1 7# Cin $end
$var wire 1 e# Cout $end
$var wire 1 d# Sum $end
$upscope $end
$upscope $end
$scope module A15 $end
$var wire 1 g# A $end
$var wire 1 h# B $end
$var wire 1 6# Cin $end
$var wire 2 i# opcode [1:0] $end
$var wire 1 %# zero_f $end
$var wire 1 j# addition_rst $end
$var wire 1 k# addition_cout $end
$var reg 1 Q Cout $end
$var reg 1 l# result $end
$scope module ADD $end
$var wire 1 g# A $end
$var wire 1 h# B $end
$var wire 1 6# Cin $end
$var wire 1 k# Cout $end
$var wire 1 j# Sum $end
$upscope $end
$upscope $end
$scope module A2 $end
$var wire 1 m# A $end
$var wire 1 n# B $end
$var wire 1 ;# Cin $end
$var wire 2 o# opcode [1:0] $end
$var wire 1 $# zero_f $end
$var wire 1 p# addition_rst $end
$var wire 1 q# addition_cout $end
$var reg 1 5# Cout $end
$var reg 1 r# result $end
$scope module ADD $end
$var wire 1 m# A $end
$var wire 1 n# B $end
$var wire 1 ;# Cin $end
$var wire 1 q# Cout $end
$var wire 1 p# Sum $end
$upscope $end
$upscope $end
$scope module A3 $end
$var wire 1 s# A $end
$var wire 1 t# B $end
$var wire 1 5# Cin $end
$var wire 2 u# opcode [1:0] $end
$var wire 1 ## zero_f $end
$var wire 1 v# addition_rst $end
$var wire 1 w# addition_cout $end
$var reg 1 4# Cout $end
$var reg 1 x# result $end
$scope module ADD $end
$var wire 1 s# A $end
$var wire 1 t# B $end
$var wire 1 5# Cin $end
$var wire 1 w# Cout $end
$var wire 1 v# Sum $end
$upscope $end
$upscope $end
$scope module A4 $end
$var wire 1 y# A $end
$var wire 1 z# B $end
$var wire 1 4# Cin $end
$var wire 2 {# opcode [1:0] $end
$var wire 1 "# zero_f $end
$var wire 1 |# addition_rst $end
$var wire 1 }# addition_cout $end
$var reg 1 3# Cout $end
$var reg 1 ~# result $end
$scope module ADD $end
$var wire 1 y# A $end
$var wire 1 z# B $end
$var wire 1 4# Cin $end
$var wire 1 }# Cout $end
$var wire 1 |# Sum $end
$upscope $end
$upscope $end
$scope module A5 $end
$var wire 1 !$ A $end
$var wire 1 "$ B $end
$var wire 1 3# Cin $end
$var wire 2 #$ opcode [1:0] $end
$var wire 1 !# zero_f $end
$var wire 1 $$ addition_rst $end
$var wire 1 %$ addition_cout $end
$var reg 1 2# Cout $end
$var reg 1 &$ result $end
$scope module ADD $end
$var wire 1 !$ A $end
$var wire 1 "$ B $end
$var wire 1 3# Cin $end
$var wire 1 %$ Cout $end
$var wire 1 $$ Sum $end
$upscope $end
$upscope $end
$scope module A6 $end
$var wire 1 '$ A $end
$var wire 1 ($ B $end
$var wire 1 2# Cin $end
$var wire 2 )$ opcode [1:0] $end
$var wire 1 ~" zero_f $end
$var wire 1 *$ addition_rst $end
$var wire 1 +$ addition_cout $end
$var reg 1 1# Cout $end
$var reg 1 ,$ result $end
$scope module ADD $end
$var wire 1 '$ A $end
$var wire 1 ($ B $end
$var wire 1 2# Cin $end
$var wire 1 +$ Cout $end
$var wire 1 *$ Sum $end
$upscope $end
$upscope $end
$scope module A7 $end
$var wire 1 -$ A $end
$var wire 1 .$ B $end
$var wire 1 1# Cin $end
$var wire 2 /$ opcode [1:0] $end
$var wire 1 }" zero_f $end
$var wire 1 0$ addition_rst $end
$var wire 1 1$ addition_cout $end
$var reg 1 0# Cout $end
$var reg 1 2$ result $end
$scope module ADD $end
$var wire 1 -$ A $end
$var wire 1 .$ B $end
$var wire 1 1# Cin $end
$var wire 1 1$ Cout $end
$var wire 1 0$ Sum $end
$upscope $end
$upscope $end
$scope module A8 $end
$var wire 1 3$ A $end
$var wire 1 4$ B $end
$var wire 1 0# Cin $end
$var wire 2 5$ opcode [1:0] $end
$var wire 1 |" zero_f $end
$var wire 1 6$ addition_rst $end
$var wire 1 7$ addition_cout $end
$var reg 1 /# Cout $end
$var reg 1 8$ result $end
$scope module ADD $end
$var wire 1 3$ A $end
$var wire 1 4$ B $end
$var wire 1 0# Cin $end
$var wire 1 7$ Cout $end
$var wire 1 6$ Sum $end
$upscope $end
$upscope $end
$scope module A9 $end
$var wire 1 9$ A $end
$var wire 1 :$ B $end
$var wire 1 /# Cin $end
$var wire 2 ;$ opcode [1:0] $end
$var wire 1 {" zero_f $end
$var wire 1 <$ addition_rst $end
$var wire 1 =$ addition_cout $end
$var reg 1 .# Cout $end
$var reg 1 >$ result $end
$scope module ADD $end
$var wire 1 9$ A $end
$var wire 1 :$ B $end
$var wire 1 /# Cin $end
$var wire 1 =$ Cout $end
$var wire 1 <$ Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x>$
x=$
x<$
bx ;$
x:$
x9$
x8$
x7$
x6$
bx 5$
x4$
x3$
x2$
x1$
x0$
bx /$
x.$
x-$
x,$
x+$
x*$
bx )$
x($
x'$
x&$
x%$
x$$
bx #$
x"$
x!$
x~#
x}#
x|#
bx {#
xz#
xy#
xx#
xw#
xv#
bx u#
xt#
xs#
xr#
xq#
xp#
bx o#
xn#
xm#
xl#
xk#
xj#
bx i#
xh#
xg#
xf#
xe#
xd#
bx c#
xb#
xa#
x`#
x_#
x^#
bx ]#
x\#
x[#
xZ#
xY#
xX#
bx W#
xV#
xU#
xT#
xS#
xR#
bx Q#
xP#
xO#
xN#
xM#
xL#
bx K#
xJ#
xI#
xH#
xG#
xF#
bx E#
xD#
xC#
xB#
xA#
x@#
bx ?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
bx -#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
bx z"
bx y"
bx x"
xw"
xv"
xu"
bx t"
xs"
xr"
xq"
xp"
xo"
bx n"
xm"
xl"
xk"
xj"
xi"
bx h"
xg"
xf"
xe"
xd"
xc"
bx b"
xa"
x`"
x_"
x^"
x]"
bx \"
x["
xZ"
xY"
xX"
xW"
bx V"
xU"
xT"
xS"
xR"
xQ"
bx P"
xO"
xN"
xM"
xL"
xK"
bx J"
xI"
xH"
xG"
xF"
xE"
bx D"
xC"
xB"
xA"
x@"
x?"
bx >"
x="
x<"
x;"
x:"
x9"
bx 8"
x7"
x6"
x5"
x4"
x3"
bx 2"
x1"
x0"
x/"
x."
x-"
bx ,"
x+"
x*"
x)"
x("
x'"
bx &"
x%"
x$"
x#"
x""
x!"
bx ~
x}
x|
x{
xz
xy
bx x
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
bx f
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
bx U
bx T
bx S
xR
xQ
bx P
xO
xN
bx M
0L
bx K
bx J
b1010 I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx00 A
bx @
b0 ?
bx00 >
bx =
bx <
bx ;
x:
x9
bx 8
x7
x6
x5
x4
bx 3
bx 2
bx 1
x0
bx /
b0 .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
0"
0!
$end
#1
10
1O
1N
0z
b0 >
0R"
0X"
0^"
0d"
0j"
0p"
0v"
0("
0."
04"
0:"
0@"
0F"
0A#
0G#
0q#
0w#
0}#
0%$
0+$
01$
07$
0=$
0M#
0S#
0Y#
0_#
0e#
0k#
1y
1e
1d
1]
1\
b0 /
b0 <
1[
1Z
1Y
1X
1W
1V
1c
1b
1a
1`
1_
1^
1,#
1+#
1$#
1##
1"#
1!#
1~"
1}"
1|"
1{"
1*#
1)#
1(#
1'#
1&#
1%#
0{
0#"
0M"
0S"
0Y"
0_"
0e"
0k"
0q"
0w"
0)"
0/"
05"
0;"
0A"
b0 f
0G"
0B#
0H#
0r#
0x#
0~#
0&$
0,$
02$
08$
0>$
0N#
0T#
0Z#
0`#
0f#
b0 1
b0 P
b0 -#
0l#
0w
0}
1I"
0O"
0U"
0["
0a"
0g"
0m"
0s"
0%"
0+"
01"
07"
0="
0C"
0>#
0D#
0n#
0t#
0z#
0"$
0($
0.$
04$
0:$
0J#
0P#
0V#
0\#
0b#
0h#
1v
1|
0H"
0N"
0T"
0Z"
0`"
0f"
0l"
0r"
0$"
0*"
00"
06"
0<"
0B"
0=#
0C#
0m#
0s#
0y#
0!$
0'$
0-$
03$
09$
0I#
0O#
0U#
0[#
0a#
0g#
b100 T
b0 y"
b11 S
b0 x"
b100 2
b100 K
b110 '
b110 E
b10000001000000011 $
b10000001000000011 =
b10000001000000011 (
b10000001000000011 H
b11 #
b11 J
b11 )
b11 G
b11 +
b11 C
b10000001000000011 .
b10000001000000011 ?
b100 -
b110 *
b110 D
17
14
09
b10001100011001100000000000000100 ,
b10001100011001100000000000000100 B
b1010 I
b1100 A
b10000001000000011 &
b10000001000000011 F
b10000001000000011 ;
15
06
1:
b1100 %
b1100 8
b1100 @
1!
#3
0Q"
0n
0L"
0K"
0t
0""
00
1}
0I"
0|
0O
b0 >
1N
b10 T
b1 S
1!"
0e
0d
0-"
1c
03"
1b
09"
1a
0?"
1`
0E"
1_
0@#
1^
1]
0W"
1\
b11 /
b11 <
0]"
1[
0c"
1Z
0i"
1Y
0o"
1X
0u"
1W
0'"
1V
0F#
1,#
0p#
1+#
0R#
1*#
0X#
1)#
0^#
1(#
0d#
1'#
0j#
1&#
1%#
0v#
1$#
0|#
1##
0$$
1"#
0*$
1!#
00$
1~"
06$
1}"
0<$
1|"
0L#
1{"
b1010 I
b10 2
b10 K
b100 '
b100 E
b10 $
b10 =
b10 (
b10 H
b1 #
b1 J
b1 )
b1 G
b1 +
b1 C
0u
1{
1#"
0s
0)"
0r
0/"
0q
05"
0p
0;"
0o
0A"
0R
0G"
0M"
0m
0S"
0l
0Y"
0k
0_"
0j
0e"
0i
0k"
0h
0q"
0g
b11 f
0w"
0<#
0B#
0;#
0H#
0:#
0N#
09#
0T#
08#
0Z#
07#
0`#
06#
0f#
0Q
0l#
05#
0r#
04#
0x#
03#
0~#
02#
0&$
01#
0,$
00#
02$
0/#
08$
0.#
b11 1
b11 P
b0 -#
0>$
b11 &
b11 F
b11 ;
b0 .
b0 ?
b10000000100000 -
b10 *
b10 D
b10 3
b10 M
b10 U
b10 x
b10 ~
b10 &"
b10 ,"
b10 2"
b10 8"
b10 >"
b10 D"
b10 J"
b10 P"
b10 V"
b10 \"
b10 b"
b10 h"
b10 n"
b10 t"
b10 z"
b10 ?#
b10 E#
b10 K#
b10 Q#
b10 W#
b10 ]#
b10 c#
b10 i#
b10 o#
b10 u#
b10 {#
b10 #$
b10 )$
b10 /$
b10 5$
b10 ;$
07
05
04
19
b1000100010000000100000 ,
b1000100010000000100000 B
b0 A
b0 %
b0 8
b0 @
1"
#5
0"
#7
b100 >
0]
b111 /
b111 <
b111 1
b111 P
b111 f
1M"
1K"
0}
1I"
1|
b100 T
b11 S
b1010 I
b100 2
b100 K
b101 '
b101 E
b100000001010000011000000111 $
b100000001010000011000000111 =
b100000001010000011000000111 (
b100000001010000011000000111 H
b11 #
b11 J
b11 )
b11 G
b100 +
b100 C
b100000001010000011000000111 &
b100000001010000011000000111 F
b100000001010000011000000111 ;
b100000001010000011000000111 .
b100000001010000011000000111 ?
b100 -
b101 *
b101 D
17
15
14
09
b10001100100001010000000000000100 ,
b10001100100001010000000000000100 B
b100 A
b100 %
b100 8
b100 @
1"
#9
0"
#11
b0 &
b0 F
b0 ;
b100 '
b100 E
b11 $
b11 =
b11 (
b11 H
b11 +
b11 C
b0 .
b0 ?
b1010 I
b100 *
b100 D
16
05
0:
b10101100011001000000000000000100 ,
b10101100011001000000000000000100 B
b1000 A
b1000 %
b1000 8
b1000 @
1"
#13
0"
#15
b11 &
b11 F
b11 ;
b110 '
b110 E
b11 $
b11 =
b11 (
b11 H
b11 .
b11 ?
b1010 I
b110 *
b110 D
06
15
1:
b10001100011001100000000000000100 ,
b10001100011001100000000000000100 B
b1100 A
b1100 %
b1100 8
b1100 @
1"
#17
0"
#19
b0 >
1]
b11 /
b11 <
b11 1
b11 P
b11 f
0M"
0K"
1}
0I"
0|
b10 T
b1 S
b1010 I
b10 2
b10 K
b100 '
b100 E
b10 $
b10 =
b10 (
b10 H
b1 #
b1 J
b1 )
b1 G
b1 +
b1 C
b11 &
b11 F
b11 ;
b0 .
b0 ?
b10000000100000 -
b10 *
b10 D
07
05
04
19
b1000100010000000100000 ,
b1000100010000000100000 B
b0 A
b0 %
b0 8
b0 @
1"
#21
0"
#26
