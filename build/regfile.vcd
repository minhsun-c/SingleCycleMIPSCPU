$date
	Thu Dec 21 01:51:01 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! read_d2 [31:0] $end
$var wire 32 " read_d1 [31:0] $end
$var reg 1 # e_write $end
$var reg 5 $ read_addr1 [4:0] $end
$var reg 5 % read_addr2 [4:0] $end
$var reg 5 & write_addr [4:0] $end
$var reg 32 ' write_data [31:0] $end
$scope module RF $end
$var wire 1 # e_write $end
$var wire 5 ( read_addr1 [4:0] $end
$var wire 5 ) read_addr2 [4:0] $end
$var wire 5 * write_addr [4:0] $end
$var wire 32 + write_data [31:0] $end
$var reg 32 , read_d1 [31:0] $end
$var reg 32 - read_d2 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
0#
bx "
bx !
$end
#1
b11111 !
b11111 -
b0 "
b0 ,
b11111 %
b11111 )
b0 $
b0 (
#2
b11110 !
b11110 -
b1 "
b1 ,
b11110 %
b11110 )
b1 $
b1 (
#3
b11101 !
b11101 -
b10 "
b10 ,
b11101 %
b11101 )
b10 $
b10 (
#4
b11100 !
b11100 -
b11 "
b11 ,
b11100 %
b11100 )
b11 $
b11 (
#5
b11011 !
b11011 -
b100 "
b100 ,
b11011 %
b11011 )
b100 $
b100 (
#6
b11010 !
b11010 -
b101 "
b101 ,
b11010 %
b11010 )
b101 $
b101 (
#7
b11001 !
b11001 -
b110 "
b110 ,
b11001 %
b11001 )
b110 $
b110 (
#8
b11000 !
b11000 -
b111 "
b111 ,
b11000 %
b11000 )
b111 $
b111 (
#9
b10111 !
b10111 -
b1000 "
b1000 ,
b10111 %
b10111 )
b1000 $
b1000 (
#10
b10110 !
b10110 -
b1001 "
b1001 ,
b10110 %
b10110 )
b1001 $
b1001 (
#11
b10101 !
b10101 -
b1010 "
b1010 ,
b10101 %
b10101 )
b1010 $
b1010 (
#12
b10100 !
b10100 -
b1011 "
b1011 ,
b10100 %
b10100 )
b1011 $
b1011 (
#13
b10101010101110111100110111101111 '
b10101010101110111100110111101111 +
b11010 &
b11010 *
1#
#14
b10011 !
b10011 -
b1100 "
b1100 ,
b10011 %
b10011 )
b1100 $
b1100 (
#15
b10010 !
b10010 -
b1101 "
b1101 ,
b10010 %
b10010 )
b1101 $
b1101 (
#16
b10001 !
b10001 -
b1110 "
b1110 ,
b10001 %
b10001 )
b1110 $
b1110 (
#17
b10000 !
b10000 -
b1111 "
b1111 ,
b10000 %
b10000 )
b1111 $
b1111 (
#18
b1111 !
b1111 -
b10000 "
b10000 ,
b1111 %
b1111 )
b10000 $
b10000 (
#19
b1110 !
b1110 -
b10001 "
b10001 ,
b1110 %
b1110 )
b10001 $
b10001 (
#20
b1101 !
b1101 -
b10010 "
b10010 ,
b1101 %
b1101 )
b10010 $
b10010 (
#21
b1100 !
b1100 -
b10011 "
b10011 ,
b1100 %
b1100 )
b10011 $
b10011 (
#22
b1011 !
b1011 -
b10100 "
b10100 ,
b1011 %
b1011 )
b10100 $
b10100 (
#23
b1010 !
b1010 -
b10101 "
b10101 ,
b1010 %
b1010 )
b10101 $
b10101 (
#24
b1001 !
b1001 -
b10110 "
b10110 ,
b1001 %
b1001 )
b10110 $
b10110 (
#25
b1000 !
b1000 -
b10111 "
b10111 ,
b1000 %
b1000 )
b10111 $
b10111 (
#26
b111 !
b111 -
b11000 "
b11000 ,
b111 %
b111 )
b11000 $
b11000 (
#27
b110 !
b110 -
b11001 "
b11001 ,
b110 %
b110 )
b11001 $
b11001 (
#28
b101 !
b101 -
b10101010101110111100110111101111 "
b10101010101110111100110111101111 ,
b101 %
b101 )
b11010 $
b11010 (
#29
b100 !
b100 -
b11011 "
b11011 ,
b100 %
b100 )
b11011 $
b11011 (
#30
b11 !
b11 -
b11100 "
b11100 ,
b11 %
b11 )
b11100 $
b11100 (
#31
b10 !
b10 -
b11101 "
b11101 ,
b10 %
b10 )
b11101 $
b11101 (
#32
b1 !
b1 -
b11110 "
b11110 ,
b1 %
b1 )
b11110 $
b11110 (
#33
b0 !
b0 -
b11111 "
b11111 ,
b0 %
b0 )
b11111 $
b11111 (
#38
